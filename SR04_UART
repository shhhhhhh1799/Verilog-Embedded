`timescale 1ns / 1ps

module top_sr04_uart (
    input        clk,
    input        rst,
    input        btn_start,
    input        echo,
    input        rx,
    output       trig,
    output       tx,
    output [7:0] fnd_data,
    output [3:0] fnd_com
);

    //=================================================
    // Button Debounce
    //=================================================
    wire w_btn_pulse;

    btn_debounce U_BTN_DEBOUNCE (
        .clk(clk),
        .rst(rst),
        .i_btn(btn_start),
        .o_btn(w_btn_pulse)
    );

    //=================================================
    // 거리 및 ASCII 신호
    //=================================================
    wire [9:0] dist;
    wire dist_done;
    wire [7:0] ascii_0, ascii_1, ascii_2, ascii_3;
    wire ascii_valid;

    //=================================================
    // 거리 측정 모듈
    //=================================================
    sr04_controller U_SR04 (
        .clk(clk),
        .rst(rst),
        .start(w_btn_pulse),
        .echo(echo),
        .trig(trig),
        .dist(dist),
        .dist_done(dist_done)
    );

    hex_to_ascii U_HEX_ASCII (
        .clk(clk),
        .rst(rst),
        .valid_in(dist_done),
        .distance(dist),
        .ascii_valid(ascii_valid),
        .ascii_0(ascii_0),
        .ascii_1(ascii_1),
        .ascii_2(ascii_2),
        .ascii_3(ascii_3)
    );

    //=================================================
    // FND 표시
    //=================================================
    fnd_controller U_FND (
        .clk(clk),
        .reset(rst),
        .count_data({4'b0000, dist}),
        .fnd_data(fnd_data),
        .fnd_com(fnd_com)
    );

    //=================================================
    // UART TX 송신 FSM
    //=================================================
    wire [7:0] tx_din;
    wire push_tx;
    wire tx_busy;

    dist_uart_sender U_DIST_SENDER (
        .clk(clk),
        .rst(rst),
        .ascii_valid(ascii_valid),
        .ascii_0(ascii_0),
        .ascii_1(ascii_1),
        .ascii_2(ascii_2),
        .ascii_3(ascii_3),
        .tx_busy(tx_busy),
        .tx_din(tx_din),
        .push_tx(push_tx)
    );

    //=================================================
    // UART Controller (TX Only)
    //=================================================
    wire tx_done;
    wire [7:0] rx_data;
    wire rx_valid;
    wire pop_rx;

    uart_controller U_UART_CTRL (
        .clk(clk),
        .rst(rst),
        .push_tx(push_tx),
        .tx_din(tx_din),
        .rx(rx),
        .tx(tx),
        .tx_busy(tx_busy),
        .tx_done(tx_done),
        .rx_data(rx_data),
        .rx_valid(rx_valid),
        .pop_rx(pop_rx)
    );

endmodule

module sr04_controller (
    input clk,
    input rst,
    input start, // Btn_start
    input echo,
    output trig,
    output [9:0] dist,
    output dist_done
);

    wire w_tick;
    wire echo_flag, echo_done;

    high_level_detector U_Echo_detect (
        .clk(w_tick),
        .rst(rst),
        .echo(echo),
        .high_level_flag(echo_flag),
        .done(echo_done)
    );

    calculator U_Calc (
        .clk(w_tick),
        .rst(rst),
        .high_level_flag(echo_flag),
        .done(echo_done),
        .distance(dist),
        .dist_done(dist_done)
    );


    start_trigger U_Start_trigg (
        .clk(clk),
        .rst(rst),
        .i_tick(w_tick),
        .start(start),
        .o_sr04_trigger(trig)
    );

    tick_gen U_Tick_Gen (
        .clk(clk),
        .rst(rst),
        .o_tick_1mhz(w_tick)
    );

endmodule

module high_level_detector (
    input clk,
    input rst,
    input echo,
    output reg high_level_flag,
    output reg done
);
    reg echo_d;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            high_level_flag <= 0;
            done <= 0;
            echo_d <= 0;
        end else begin
            echo_d <= echo;
            if (echo && !echo_d) begin
                high_level_flag <= 1;
                done <= 0;
            end
            else if (!echo && echo_d) begin
                high_level_flag <= 0;
                done <= 1;
            end else begin
                done <= 0;
            end
        end
    end
endmodule

module calculator (
    input clk,
    input rst,
    input high_level_flag,
    input done,
    output reg [9:0] distance,
    output reg dist_done
);
    reg [15:0] count;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            count <= 0;
            distance <= 0;
            dist_done <= 0;
        end else begin
            if (high_level_flag) begin
                count <= count + 1;
                dist_done <= 0;
            end else if (done) begin
                distance <= count / 58;
                dist_done <= 1;
                count <= 0;
            end else begin
                dist_done <= 0;
            end
        end
    end
endmodule

module start_trigger (
    input  clk,
    input  rst,
    input  i_tick,
    input  start,
    output o_sr04_trigger
);
    reg start_reg, start_next;
    reg [3:0] count_reg, count_next;
    reg sr04_trigg_reg, sr04_trigg_next;

    assign o_sr04_trigger = sr04_trigg_reg;

    always @(posedge clk, posedge rst) begin
        if (rst) begin
            start_reg <= 0;
            sr04_trigg_reg <= 0;
            count_reg <= 0;
        end else begin
            start_reg <= start_next;
            sr04_trigg_reg <= sr04_trigg_next;
            count_reg <= count_next;
        end
    end

    always @(*) begin
        start_next = start_reg;
        sr04_trigg_next = sr04_trigg_reg;
        count_next = count_reg;
        case (start_reg)
            0: begin
                count_next = 0;
                sr04_trigg_next = 1'b0;
                if (start) begin
                    start_next = 1;
                end
            end
            1: begin
                if (i_tick) begin
                    sr04_trigg_next = 1'b1;
                    if (count_reg == 10) begin
                        start_next = 0;
                    end
                    count_next = count_reg + 1;
                end
            end
        endcase
    end

endmodule

module tick_gen (
    input  clk,
    input  rst,
    output o_tick_1mhz
);

    parameter F_COUNT = 100 - 1;

    reg [6:0] count;
    reg tick;

    assign o_tick_1mhz = tick;

    always @(posedge clk, posedge rst) begin
        if (rst) begin
            count <= 0;
            tick  <= 0;
        end else begin
            if (count == F_COUNT) begin
                count <= 0;
                tick  <= 1'b1;
            end else begin
                count <= count + 1;
                tick  <= 1'b0;
            end
        end
    end

endmodule

module hex_to_ascii (
    input        clk,
    input        rst,
    input        valid_in,         // 거리 계산 완료 신호 (e.g., dist_done)
    input  [9:0] distance,         // 0~1023 거리 값

    output reg        ascii_valid, // 변환 완료 플래그
    output reg [7:0]  ascii_0,     // ASCII of 1's digit
    output reg [7:0]  ascii_1,     // ASCII of 10's digit
    output reg [7:0]  ascii_2,     // ASCII of 100's digit
    output reg [7:0]  ascii_3      // ASCII of 1000's digit (optional)
);

    reg [3:0] d0, d1, d2, d3;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            ascii_valid <= 0;
            ascii_0 <= 0;
            ascii_1 <= 0;
            ascii_2 <= 0;
            ascii_3 <= 0;
        end else begin
            if (valid_in) begin
                // BCD 분리
                d0 <= distance % 10;
                d1 <= (distance / 10) % 10;
                d2 <= (distance / 100) % 10;
                d3 <= (distance / 1000) % 10;

                // ASCII 변환: '0'(8'h30) + 숫자 값
                ascii_0 <= 8'h30 + (distance % 10);
                ascii_1 <= 8'h30 + ((distance / 10) % 10);
                ascii_2 <= 8'h30 + ((distance / 100) % 10);
                ascii_3 <= 8'h30 + ((distance / 1000) % 10);

                ascii_valid <= 1;
            end else begin
                ascii_valid <= 0;
            end
        end
    end

endmodule

module fnd_controller (
    input         clk,
    input         reset,
    input  [13:0] count_data,
    output [ 7:0] fnd_data,
    output [ 3:0] fnd_com
);

    wire [3:0] w_bcd, w_digit_1, w_digit_10, w_digit_100, w_digit_1000;
    wire w_oclk;
    wire [1:0] fnd_sel;

    clk_div U_CLK_Div (
        .clk  (clk),
        .reset(reset),
        .o_clk(w_oclk)
    );

    counter_4 U_Counter_4 (
        .clk(w_oclk),
        .reset(reset),
        .fnd_sel(fnd_sel)
    );

    decoder_2x4 U_Decoder_2x4 (
        .fnd_sel(fnd_sel),
        .fnd_com(fnd_com)
    );

    digit_splitter U_DS (
        .count_data(count_data),
        .digit_1(w_digit_1),
        .digit_10(w_digit_10),
        .digit_100(w_digit_100),
        .digit_1000(w_digit_1000)
    );

    mux_4x1 U_MUX_4x1 (
        .sel(fnd_sel),
        .digit_1(w_digit_1),
        .digit_10(w_digit_10),
        .digit_100(w_digit_100),
        .digit_1000(w_digit_1000),
        .bcd(w_bcd)
    );

    bcd U_BCD (
        .bcd(w_bcd),
        .fnd_data(fnd_data)
    );

endmodule

module clk_div (
    input  clk,
    input  reset,
    output o_clk
);
    // clk 100_000_000, r_count 100_000
    //reg [16:0] r_counter;
    reg [$clog2(100_100)-1:0] r_counter;
    reg r_clk;
    assign o_clk = r_clk;

    always @(posedge clk, posedge reset) begin
        if (reset) begin
            r_counter <= 0;
            r_clk     <= 1'b0;
        end else begin
            if (r_counter == 100_000 - 1) begin  // 1khz period
                r_counter <= 0;
                r_clk <= 1'b1;
            end else begin
                r_counter <= r_counter + 1;
                r_clk <= 1'b0;
            end
        end
    end

endmodule

module counter_4 (
    input        clk,
    input        reset,
    output [1:0] fnd_sel
);

    reg [1:0] r_counter;
    assign fnd_sel = r_counter;

    always @(posedge clk, posedge reset) begin
        if (reset) begin
            r_counter <= 0;
        end else begin
            r_counter <= r_counter + 1;
        end
    end

endmodule

module decoder_2x4 (
    input      [1:0] fnd_sel,
    output reg [3:0] fnd_com
);
    always @(fnd_sel) begin
        case (fnd_sel)
            2'b00: begin
                fnd_com = 4'b1110;  // fnd 1의 자리 on
            end
            2'b01:   fnd_com = 4'b1101;
            2'b10:   fnd_com = 4'b1011;
            2'b11:   fnd_com = 4'b0111;
            default: fnd_com = 4'b1111;
        endcase
    end
endmodule

module mux_4x1 (
    input  [1:0] sel,
    input  [3:0] digit_1,
    input  [3:0] digit_10,
    input  [3:0] digit_100,
    input  [3:0] digit_1000,
    output [3:0] bcd
);

    reg [3:0] r_bcd;
    assign bcd = r_bcd;

    // 4:1 mux, always
    always @(*) begin
        case (sel)
            2'b00: r_bcd = digit_1;
            2'b01: r_bcd = digit_10;
            2'b10: r_bcd = digit_100;
            2'b11: r_bcd = digit_1000;
        endcase
    end

endmodule

module digit_splitter (
    input  [13:0] count_data,
    output [ 3:0] digit_1,
    output [ 3:0] digit_10,
    output [ 3:0] digit_100,
    output [ 3:0] digit_1000
);

    assign digit_1    = count_data % 10;
    assign digit_10   = (count_data / 10) % 10;
    assign digit_100  = (count_data / 100) % 10;
    assign digit_1000 = (count_data / 1000) % 10;

endmodule

module bcd (
    input  [3:0] bcd,
    output [7:0] fnd_data
);

    reg [7:0] r_fnd_data;
    assign fnd_data = r_fnd_data;

    always @(bcd) begin
        case (bcd)
            4'h00:   r_fnd_data = 8'hc0;
            4'h01:   r_fnd_data = 8'hf9;
            4'h02:   r_fnd_data = 8'ha4;
            4'h03:   r_fnd_data = 8'hb0;
            4'h04:   r_fnd_data = 8'h99;
            4'h05:   r_fnd_data = 8'h92;
            4'h06:   r_fnd_data = 8'h82;
            4'h07:   r_fnd_data = 8'hf8;
            4'h08:   r_fnd_data = 8'h80;
            4'h09:   r_fnd_data = 8'h90;
            default: r_fnd_data = 8'h00;
        endcase
    end

endmodule

module uart_controller (
    input        clk,
    input        rst,
    input        push_tx,        
    input  [7:0] tx_din,         
    input        rx,            

    output       tx,             
    output       tx_busy,        
    output       tx_done,        

    input        pop_rx,         
    output [7:0] rx_data,        
    output       rx_valid        
);

    // 내부 신호
    wire w_bd_tick;
    wire w_tx_full, w_tx_empty;
    wire w_rx_full, w_rx_empty;
    wire [7:0] w_tx_data;
    wire [7:0] w_rx_data_in;
    wire [7:0] w_rx_data_out;
    wire w_tx_start;
    wire w_rx_done;
    wire w_tx_busy, w_tx_done;

    assign tx_busy   = w_tx_busy;
    assign tx_done   = w_tx_done;
    assign rx_data   = w_rx_data_out;
    assign rx_valid  = ~w_rx_empty;

    //----------------------------------
    // TX FIFO
    //----------------------------------
    reg tx_pop;

    always @(posedge clk or posedge rst) begin
        if (rst)
            tx_pop <= 0;
        else if (w_tx_done)
            tx_pop <= 1;
        else
            tx_pop <= 0;
    end

    fifo U_FIFO_TX (
        .clk       (clk),
        .rst       (rst),
        .push      (push_tx),
        .pop       (tx_pop),
        .push_data (tx_din),
        .full      (w_tx_full),
        .empty     (w_tx_empty),
        .pop_data  (w_tx_data)
    );

    assign w_tx_start = ~w_tx_empty;

    //----------------------------------
    // RX FIFO
    //----------------------------------
    fifo U_FIFO_RX (
        .clk       (clk),
        .rst       (rst),
        .push      (w_rx_done),
        .pop       (pop_rx),
        .push_data (w_rx_data_in),
        .full      (w_rx_full),
        .empty     (w_rx_empty),
        .pop_data  (w_rx_data_out)
    );

    //----------------------------------
    // UART TX
    //----------------------------------
    uart_tx U_UART_TX (
        .clk         (clk),
        .rst         (rst),
        .baud_tick   (w_bd_tick),
        .start       (w_tx_start),
        .din         (w_tx_data),
        .o_tx_done   (w_tx_done),
        .o_tx_busy   (w_tx_busy),
        .o_tx        (tx)
    );

    //----------------------------------
    // UART RX
    //----------------------------------
    uart_rx U_UART_RX (
        .clk       (clk),
        .rst       (rst),
        .b_tick    (w_bd_tick),
        .rx        (rx),
        .o_dout    (w_rx_data_in),
        .o_rx_done (w_rx_done)
    );

    //----------------------------------
    // Baudrate Generator
    //----------------------------------
    baudrate U_BR (
        .clk       (clk),
        .rst       (rst),
        .baud_tick (w_bd_tick)
    );

endmodule

module uart_rx (
    input        clk,
    input        rst,
    input        b_tick,
    input        rx,
    output [7:0] o_dout,
    output       o_rx_done
);

    localparam IDLE = 0, START = 1, DATA = 2, DATA_READ = 3, STOP = 4;

    reg [2:0] c_state, n_state;
    reg [3:0] b_cnt_reg, b_cnt_next;
    reg [3:0] d_cnt_reg, d_cnt_next;
    reg [7:0] dout_reg, dout_next;
    reg rx_done_reg, rx_done_next;

    assign o_dout    = dout_reg;
    assign o_rx_done = rx_done_reg;

    // state
    always @(posedge clk, posedge rst) begin
        if (rst) begin
            c_state     <= IDLE;
            b_cnt_reg   <= 0;
            d_cnt_reg   <= 0;
            dout_reg    <= 0;
            rx_done_reg <= 0;
        end else begin
            c_state     <= n_state;
            b_cnt_reg   <= b_cnt_next;
            d_cnt_reg   <= d_cnt_next;
            dout_reg    <= dout_next;
            rx_done_reg <= rx_done_next;
        end
    end

    // next
    always @(*) begin
        n_state      = c_state;
        b_cnt_next   = b_cnt_reg;
        d_cnt_next   = d_cnt_reg;
        dout_next    = dout_reg;
        rx_done_next = rx_done_reg;
        case (c_state)
            IDLE: begin
                b_cnt_next = 0;
                d_cnt_next = 0;
                rx_done_next = 1'b0;
                if (b_tick) begin
                    if (rx == 1'b0) begin
                        n_state = START;
                    end
                end
            end
            START: begin
                if (b_tick) begin
                    if (b_cnt_reg == 11) begin
                        n_state = DATA_READ;
                        b_cnt_next = 0;
                    end else begin
                        b_cnt_next = b_cnt_reg + 1;
                    end
                end
            end
            DATA_READ: begin
                dout_next = {rx, dout_reg[7:1]};
                n_state   = DATA;
            end
            DATA: begin
                if (b_tick) begin
                    if (b_cnt_reg == 7) begin
                        if (d_cnt_reg == 7) begin
                            n_state = STOP;
                        end else begin
                            d_cnt_next = d_cnt_reg + 1;
                            b_cnt_next = 0;
                            n_state = DATA_READ;
                        end
                    end else begin
                        b_cnt_next = b_cnt_reg + 1;
                    end
                end
            end
            STOP: begin
                if (b_tick) begin
                    n_state = IDLE;
                    rx_done_next = 1'b1;
                end
            end
        endcase
    end

endmodule

module uart_tx (
    input clk,
    input rst,
    input baud_tick,
    input start,
    input [7:0] din,
    output o_tx_done,
    output o_tx_busy,
    output o_tx
);

    localparam IDLE = 0, START = 1, DATA = 2, STOP = 3, WAIT = 4;

    reg [2:0] c_state, n_state;
    reg tx_reg, tx_next;
    reg [2:0] data_cnt_reg, data_cnt_next;  // 데이터 비트 위치 (0~7)
    reg [3:0]
        b_cnt_reg,
        b_cnt_next;  // baud_tick을 8개 동안 유지하기 위한 카운터 (0~7)
    reg tx_done_reg, tx_done_next;
    reg tx_busy_reg, tx_busy_next;
    // tx data buffer
    reg [7:0] tx_din_reg, tx_din_next;

    assign o_tx = tx_reg;
    assign o_tx_done = tx_done_reg;
    assign o_tx_busy = tx_busy_reg;
    // assign o_tx_done = ((c_state == STOP) & (b_cnt_reg == 7)) ? 1'b1 : 1'b0;

    // state register
    always @(posedge clk, posedge rst) begin
        if (rst) begin
            c_state      <= 0;
            tx_reg       <= 1'b1;
            data_cnt_reg <= 0;  // data bit 전송 반복구조를 위해서
            b_cnt_reg    <= 0;  // baud tick을 0부터7까지 count
            tx_done_reg  <= 0;
            tx_busy_reg  <= 0;
            tx_din_reg   <= 0;
        end else begin
            c_state      <= n_state;
            tx_reg       <= tx_next;
            data_cnt_reg <= data_cnt_next;
            b_cnt_reg    <= b_cnt_next;
            tx_done_reg  <= tx_done_next;
            tx_busy_reg  <= tx_busy_next;
            tx_din_reg   <= tx_din_next;
        end
    end

    // next state CL
    always @(*) begin
        n_state       = c_state;
        tx_next       = tx_reg;
        data_cnt_next = data_cnt_reg;
        b_cnt_next    = b_cnt_reg;
        tx_done_next  = 0;
        tx_busy_next  = tx_busy_reg;
        tx_din_next   = tx_din_reg;
        case (c_state)
            IDLE: begin
                b_cnt_next = 0;
                data_cnt_next = 0;
                tx_next = 1'b1;
                tx_done_next = 1'b0;
                tx_busy_next = 1'b0;
                if (start == 1'b1) begin
                    n_state = START;
                    tx_busy_next = 1'b1;
                    tx_din_next = din;
                end
            end
            START: begin
                if (baud_tick == 1'b1) begin
                    tx_next = 1'b0;
                    if (b_cnt_reg == 8) begin
                        n_state = DATA;
                        data_cnt_next = 0;
                        b_cnt_next = 0;
                    end else begin
                        b_cnt_next = b_cnt_reg + 1;
                    end
                end
            end

            DATA: begin
                tx_next = tx_din_reg[data_cnt_reg];
                if (baud_tick == 1'b1) begin
                    if (b_cnt_reg == 3'b111) begin
                        if (data_cnt_reg == 3'b111) begin
                            n_state = STOP;
                        end
                        b_cnt_next = 0;
                        data_cnt_next = data_cnt_reg + 1;
                    end else begin
                        b_cnt_next = b_cnt_reg + 1;
                    end
                end
            end

            STOP: begin
                tx_next = 1'b1;
                if (baud_tick == 1'b1) begin
                    if (b_cnt_reg == 3'b111) begin
                        n_state = IDLE;
                        tx_busy_next = 1'b0;
                        tx_done_next = 1'b1;
                    end
                    b_cnt_next = b_cnt_reg + 1;
                end
            end
        endcase
    end

endmodule

module fifo (
    input        clk,
    input        rst,
    input        push,
    input        pop,
    input  [7:0] push_data,
    output       full,
    output       empty,
    output [7:0] pop_data
);

    wire [3:0] w_w_ptr, w_r_ptr;

    fifo_cu U_FIFO_CU (
        .clk  (clk),
        .rst  (rst),
        .push (push),
        .pop  (pop),
        .w_ptr(w_w_ptr),
        .r_ptr(w_r_ptr),
        .full (full),
        .empty(empty)
    );

    register_file U_Reg_File (
        .clk(clk),
        .wr_en(push & (~full)),  // write enable
        .wdata(push_data),
        .w_ptr(w_w_ptr),  // write address
        .r_ptr(w_r_ptr),  // read address
        .rdata(pop_data)
    );

endmodule

module register_file #(
    parameter DEPTH = 16,
    parameter WIDTH = 4
) (
    input              clk,
    input              wr_en,  // write enable
    input  [      7:0] wdata,
    input  [WIDTH-1:0] w_ptr,  // write address
    input  [WIDTH-1:0] r_ptr,  // read address
    output [      7:0] rdata
);

    reg [7:0] mem[0:DEPTH - 1];  // mem[0:2**WIDTH - 1]   **:제곱
    assign rdata = mem[r_ptr];

    always @(posedge clk) begin
        if (wr_en) begin
            mem[w_ptr] <= wdata;
        end
        // rdata <= mem[r_ptr];
    end

endmodule

module fifo_cu (
    input clk,
    input rst,
    input push,
    input pop,
    output [3:0] w_ptr,
    output [3:0] r_ptr,
    output full,
    output empty
);

    reg [3:0] w_ptr_reg, w_ptr_next, r_ptr_reg, r_ptr_next;
    reg full_reg, full_next, empty_reg, empty_next;

    assign w_ptr = w_ptr_reg;
    assign r_ptr = r_ptr_reg;
    assign full  = full_reg;
    assign empty = empty_reg;

    always @(posedge clk, posedge rst) begin
        if (rst) begin
            w_ptr_reg <= 0;
            r_ptr_reg <= 0;
            full_reg  <= 0;
            empty_reg <= 1;
        end else begin
            w_ptr_reg <= w_ptr_next;
            r_ptr_reg <= r_ptr_next;
            full_reg  <= full_next;
            empty_reg <= empty_next;
        end
    end

    always @(*) begin
        w_ptr_next = w_ptr_reg;
        r_ptr_next = r_ptr_reg;
        full_next  = full_reg;
        empty_next = empty_reg;
        case ({
            pop, push
        })
            2'b01: begin  // push
                if (full_reg == 1'b0) begin
                    w_ptr_next = w_ptr_reg + 1;
                    empty_next = 0;
                    if (w_ptr_next == r_ptr_reg) begin
                        full_next = 1'b1;
                    end
                end
            end
            2'b10: begin  // pop
                if (empty_reg == 1'b0) begin
                    r_ptr_next = r_ptr_reg + 1;
                    full_next  = 1'b0;
                    if (w_ptr_reg == r_ptr_next) begin
                        empty_next = 1;
                    end
                end
            end
            2'b11: begin  // push, pop
                if (empty_reg == 1'b1) begin
                    w_ptr_next = w_ptr_reg + 1;
                    empty_next = 1'b0;
                end else if (full_reg == 1'b1) begin
                    r_ptr_next = r_ptr_reg + 1;
                    full_next  = 1'b0;
                end else begin
                    w_ptr_next = w_ptr_reg + 1;
                    r_ptr_next = r_ptr_reg + 1;
                end
            end
        endcase
    end

endmodule

module dht11_uart_sender (
    input clk,
    input rst,
    input ascii_valid,
    input [7:0] ascii_T0,
    input [7:0] ascii_T1,
    input [7:0] ascii_RH0,
    input [7:0] ascii_RH1,
    input tx_busy,

    output reg [7:0] tx_din,
    output reg push_tx
);

    reg [4:0] index;
    reg sending;
    reg [7:0] msg[0:23];  // "Temp = XXC\r\nHumi = XX%\r\n"

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            index   <= 0;
            tx_din  <= 0;
            push_tx <= 0;
            sending <= 0;
        end else begin
            push_tx <= 0;

            if (ascii_valid && !sending) begin
                // 메시지 구성
                msg[0]  <= "T";
                msg[1]  <= "e";
                msg[2]  <= "m";
                msg[3]  <= "p";
                msg[4]  <= " ";
                msg[5]  <= "=";
                msg[6]  <= " ";
                msg[7]  <= ascii_RH1;
                msg[8]  <= ascii_RH0;
                msg[9]  <= "C";
                msg[10] <= 8'h0D;
                msg[11] <= 8'h0A;
                msg[12] <= "H";
                msg[13] <= "u";
                msg[14] <= "m";
                msg[15] <= "i";
                msg[16] <= " ";
                msg[17] <= "=";
                msg[18] <= " ";
                msg[19] <= ascii_T1;
                msg[20] <= ascii_T0;
                msg[21] <= "%";
                msg[22] <= 8'h0D;
                msg[23] <= 8'h0A;
                sending <= 1;
                index   <= 0;
            end else if (sending && !tx_busy) begin
                tx_din  <= msg[index];
                push_tx <= 1;
                index   <= index + 1;

                if (index == 23) begin
                    sending <= 0;
                end
            end
        end
    end

endmodule

module btn_debounce (
    input  clk,
    input  rst,
    input  i_btn,
    output o_btn
);
    parameter F_COUNT = 1000;
    // 100Khz
    reg [$clog2(F_COUNT)-1:0] r_counter;
    reg r_clk;
    reg [7:0] q_reg, q_next;
    wire w_debounce;

    // 100KHz r_clk 생성.
    always @(posedge clk, posedge rst) begin
        if (rst) begin
            r_counter <= 0;
            r_clk <= 0;
        end else begin
            if (r_counter == (F_COUNT - 1)) begin
                r_counter <= 0;
                r_clk <= 1'b1;
            end else begin
                r_counter <= r_counter + 1;
                r_clk <= 1'b0;
            end
        end
    end

    // debounce
    always @(posedge r_clk, posedge rst) begin
        if (rst) begin
            q_reg <= 0;
        end else begin
            q_reg <= q_next;
        end
    end
    always @(i_btn, q_reg) begin
        q_next = {i_btn, q_reg[7:1]};
    end

    // 8 input and gate
    assign w_debounce = &q_reg;

    reg r_edge_q;  // Q5

    // edge detector
    always @(posedge clk, posedge rst) begin
        if (rst) begin
            r_edge_q <= 0;
        end else begin
            r_edge_q <= w_debounce;
        end
    end

    // rising edge 
    assign o_btn = (~r_edge_q) & w_debounce;

endmodule

module baudrate (
    input clk,
    input rst,
    output baud_tick
);

    //clk 100Mhz
    parameter BAUD = 9600;
    parameter BAUD_COUNT = 100_000_000 / (BAUD * 8);
    reg [$clog2(BAUD_COUNT)-1:0] count_reg, count_next;
    reg baud_tick_reg, baud_tick_next;

    assign baud_tick = baud_tick_reg;

    always @(posedge clk, posedge rst) begin
        if (rst) begin
            count_reg <= 0;
            baud_tick_reg <= 0;
        end else begin
            count_reg <= count_next;
            baud_tick_reg <= baud_tick_next;
        end
    end

    always @(*) begin
        count_next = count_reg;
        baud_tick_next = 0;  // 둘다 상관 없다 baud_tick_reg
        if (count_reg == BAUD_COUNT - 1) begin
            count_next = 0;
            baud_tick_next = 1'b1;
        end else begin
            count_next = count_reg + 1;
            baud_tick_next = 1'b0;
        end
    end

endmodule
