`timescale 1ns / 1ps

module Top(
    input           clk,
    input           rst,
    input           btnL,
    input           btnR,
    input           btnU,
    input           btnD,
    input  [1:0]    sw,

    output [3:0]    fnd_com,
    output [7:0]    fnd_data,
    output [3:0]    led
    );

    wire [6:0] w_msec, sw_msec, msec;
    wire [5:0] w_sec, w_min, sw_sec, sw_min, sec, min;
    wire [4:0] w_hour, sw_hour, hour;
    wire btnL_sw, btnR_sw, btnL_w, btnR_w, btnU_w, btnD_w;
    wire [3:1] o_led;

    // Stopwatch 동작 버튼 입력 (sw[0]이 1일 때 Stopwatch 입력)
    assign btnL_sw = sw[1] & btnL;
    assign btnR_sw = sw[1] & btnR;

    // Watch 동작 버튼 입력 (sw[1]이 0일 때 Watch 버튼 입력)
    assign btnL_w = (~sw[1]) & btnL;
    assign btnR_w = (~sw[1]) & btnR;
    assign btnU_w = (~sw[1]) & btnU;
    assign btnD_w = (~sw[1]) & btnD;

    // Stopwatch, Watch 출력 결정 (sw[1]이 1이면 stopwatch 출력, 0이면 watch 출력)
    assign msec = (sw[1])? sw_msec  : w_msec;
    assign sec  = (sw[1])? sw_sec   : w_sec;
    assign min  = (sw[1])? sw_min   : w_min;
    assign hour = (sw[1])? sw_hour  : w_hour;

    // led 출력 할당 (sw[1]이면 stopwatch 동작, sw[1]이 0인 상태에서 o_led가 1, 2, 3이면 각각 초/분/시 설정 모드)
    assign led[0] = sw[1];
    assign led[1] = (~sw[1]) & o_led[1];
    assign led[2] = (~sw[1]) & o_led[2];    
    assign led[3] = (~sw[1]) & o_led[3];

    stopwatch STOPWATCH (
        .clk(clk),
        .rst(rst),
        .btnL_Clear(btnL_sw),
        .btnR_RunStop(btnR_sw),
        .msec(sw_msec),
        .sec(sw_sec),
        .min(sw_min),
        .hour(sw_hour)
    );

    watch WATCH (
        .clk(clk),
        .rst(rst),
        .btnL_Left(btnL_w),
        .btnR_Right(btnR_w),
        .btnU_Up(btnU_w),
        .btnD_Down(btnD_w),
        .msec(w_msec),
        .sec(w_sec),
        .min(w_min),
        .hour(w_hour),
        .led(o_led[3:1])
    );

    FND_Controller FND_CTRL (
        .clk(clk),
        .reset(rst),
        .msec(msec),
        .sec(sec),
        .min(min),
        .hour(hour),
        .select_screen_hour(sw[0]),
        .fnd_data(fnd_data),
        .fnd_com(fnd_com)
    );
endmodule

// stopwatch.v
module stopwatch(
    input           clk,
    input           rst,
    input           btnL_Clear,
    input           btnR_RunStop,

    output [6:0]    msec,
    output [5:0]    sec,
    output [5:0]    min,
    output [4:0]    hour
    );

    wire w_clear, w_runstop;
    wire L_edge, R_edge;

/* 
    // stop 상태 전이를 위함. clk를 멈춰주어 count를 멈춤
    wire stop_clk = clk & w_runstop;
    // clear 상태 전이를 위함. 
    wire clear_rst = rst | w_clear;
 */

    btn_debounce BTNL_DB_CLEAR(
    .clk(clk),
    .rst(rst),
    .i_btn(btnL_Clear),

    .o_btn(L_edge)
    );

    btn_debounce BTNR_DB_RUNSTOP(
    .clk(clk),
    .rst(rst),
    .i_btn(btnR_RunStop),

    .o_btn(R_edge)
    );

    stopwatch_cu U_STOPWATCH_CU (
        .clk(clk),
        .rst(rst),
        .i_clear(L_edge),
        .i_runstop(R_edge),

        .o_clear(w_clear),
        .o_runstop(w_runstop)
    );

    stopwatch_dp U_STOPWATCH_DP (
        .clk(clk),
        .rst(rst),
        .clear(w_clear),
        .run_stop(w_runstop),

        .msec(msec),
        .sec(sec),
        .min(min),
        .hour(hour)
    );

endmodule

// watch.v
module watch(
    input           clk,
    input           rst,
    input           btnL_Left,
    input           btnR_Right,
    input           btnU_Up,
    input           btnD_Down,

    output [6:0]    msec,
    output [5:0]    sec,
    output [5:0]    min,
    output [4:0]    hour,
    output [3:1]    led
    );

    wire w_clear, w_runstop;
    wire L_edge, R_edge, U_edge, D_edge;
    wire w_set_sec, w_set_min, w_set_hour;
    
    assign led[3:1] = {w_set_hour, w_set_min, w_set_sec};

/* 
    // stop 상태 전이를 위함. clk를 멈춰주어 count를 멈춤
    wire stop_clk = clk & w_runstop;
    // clear 상태 전이를 위함. 
    wire clear_rst = rst | w_clear;
 */

    btn_debounce BTNL_DB_LEFT(
    .clk(clk),
    .rst(rst),
    .i_btn(btnL_Left),

    .o_btn(L_edge)
    );

    btn_debounce BTNR_DB_RIGHT(
    .clk(clk),
    .rst(rst),
    .i_btn(btnR_Right),

    .o_btn(R_edge)
    );

    btn_debounce BTNU_DB_UP(
    .clk(clk),
    .rst(rst),
    .i_btn(btnU_Up),

    .o_btn(U_edge)
    );

    btn_debounce BTND_DB_DOWN(
    .clk(clk),
    .rst(rst),
    .i_btn(btnD_Down),

    .o_btn(D_edge)
    );

    watch_cu U_WATCH_CU (
        .clk(clk),
        .rst(rst),
        .i_left(L_edge),
        .i_right(R_edge),

        .o_set_sec(w_set_sec),
        .o_set_min(w_set_min),
        .o_set_hour(w_set_hour)
    );

    watch_dp U_STOPWATCH_DP (
        .clk(clk),
        .rst(rst),
        .i_up(U_edge),
        .i_down(D_edge),
        .i_set_sec(w_set_sec),
        .i_set_min(w_set_min),
        .i_set_hour(w_set_hour),

        .msec(msec),
        .sec(sec),
        .min(min),
        .hour(hour)
    );

endmodule

module FND_Controller (
    input clk,
    input reset,
    input [6:0] msec,
    input [5:0] sec,
    input [5:0] min,
    input [4:0] hour,
    input select_screen_hour,

    output [7:0] fnd_data,
    output [3:0] fnd_com
);
    wire [3:0] w_b;
    wire [3:0] w_msec_1, w_msec_10, w_sec_1, w_sec_10, w_min_1, w_min_10, w_hour_1, w_hour_10;
    wire [3:0] w_digit_1, w_digit_10, w_digit_100, w_digit_1000;
    wire [2:0] fnd_sel;
    wire w_oclk;
    wire clk_1sec;

    assign w_digit_1 = (select_screen_hour) ? w_min_1 : w_msec_1;
    assign w_digit_10 = (select_screen_hour) ? w_min_10 : w_msec_10;
    assign w_digit_100 = (select_screen_hour) ? w_hour_1 : w_sec_1;
    assign w_digit_1000 = (select_screen_hour) ? w_hour_10 : w_sec_10;


    clk_1sec U_CLK_1SEC (
        .clk(clk),
        .rst(rst),
        .msec(msec),

        .clk_1sec(clk_1sec)
    );

    clk_div_1 U_CLK_Div (
        .clk(clk),
        .reset(reset),
        .o_clk(w_oclk)
    );

/* 
    counter_4  U_Counter_4 (
        .clk(w_oclk),
        .reset(reset),
        .fnd_sel(fnd_sel)
    );
 */
 
    counter_8  U_Counter_8 (
        .clk(w_oclk),
        .reset(reset),
        .fnd_sel(fnd_sel)
    );

    decoder_2x4 U_Decoder_2x4 (
        .fnd_sel(fnd_sel[1:0]),
        .fnd_com(fnd_com)
    );

    digit_splitter #(
        .BIT_WIDTH(7)
    ) U_DS_MSEC (
        .time_data(msec),
        
        .disit_1(w_msec_1),
        .disit_10(w_msec_10)
    );

    digit_splitter #(
        .BIT_WIDTH(6)
    ) U_DS_SEC (
        .time_data(sec),
        
        .disit_1(w_sec_1),
        .disit_10(w_sec_10)
    );    

    digit_splitter #(
        .BIT_WIDTH(6)
    ) U_DS_MIN (
        .time_data(min),
        
        .disit_1(w_min_1),
        .disit_10(w_min_10)
    );    

    digit_splitter #(
        .BIT_WIDTH(5)
    ) U_DS_HOUR (
        .time_data(hour),
        
        .disit_1(w_hour_1),
        .disit_10(w_hour_10)
    );    
/* 
    MUX_4x1 U_MUX_4x1 (
        .sel(fnd_sel),
        .disit_1(w_digit_1),
        .disit_10(w_digit_10),
        .disit_100(w_digit_100),
        .disit_1000(w_digit_1000),

        .bcd(w_b)
    );
 */
    MUX_8x1 U_MUX_8x1 (
        .sel(fnd_sel),
        .disit_1(w_digit_1),
        .disit_10(w_digit_10),
        .disit_100(w_digit_100),
        .disit_1000(w_digit_1000),
        .dot_display(clk_1sec),
        .bcd(w_b)
    );

    BCD U_BCD (
        .bcd(w_b),

        .fnd_data(fnd_data)
    );

endmodule

// clock divider, 10000Hz => 10kHz인 상태.
module clk_div_1 (
    input clk,
    input reset,

    output o_clk
);
    reg [$clog2(100_000) - 1:0] r_counter;  
    reg r_clk;
    assign o_clk = r_clk;

    always @(posedge clk, posedge reset) begin
        if (reset) begin
            r_counter   <= 0;
            r_clk       <= 1'b0;
        end else begin
            if (r_counter == 100_000 - 1) begin
                r_counter <= 0;
                r_clk <= 1'b1;
            end else begin
                r_counter <= r_counter + 1;
                r_clk <= 1'b0;
            end
        end
    end
endmodule

module clk_1sec (
    input clk,
    input [6:0] msec,
    input rst,

    output clk_1sec
);
    reg [6:0] r_counter;  
    reg r_clk;
    assign clk_1sec = r_clk;

    always @(posedge clk, posedge rst) begin
        if (rst) begin
            r_clk       <= 1'b0;
        end else begin
            if (msec <= 49) begin
                r_clk <= 1'b0;
            end else begin
                r_clk <= 1'b1;
            end
        end
    end
endmodule
/* 
// 4진 카운터.
module counter_4 (
    input clk,
    input reset,

    output [1:0] fnd_sel
);
    reg [1:0] r_counter;
    assign fnd_sel = r_counter;

    always @(posedge clk, posedge reset) begin
        if (reset) begin
            r_counter <= 0;
        end else begin
            r_counter <= r_counter + 1;
        end
    end
endmodule
 */
// 8진 카운터.
module counter_8 (
    input clk,
    input reset,

    output [2:0] fnd_sel
);
    reg [2:0] r_counter;
    assign fnd_sel = r_counter;

    always @(posedge clk, posedge reset) begin
        if (reset) begin
            r_counter <= 0;
        end else begin
            r_counter <= r_counter + 1;
        end
    end
endmodule

module decoder_2x4 (
    input [1:0] fnd_sel,

    output reg [3:0] fnd_com  // always 문의 출력은 "reg"
);

    always @(fnd_sel) begin
        case (fnd_sel)
            2'b00:   fnd_com = 4'b1110;  // fnd 1의 자리 on.
            2'b01:   fnd_com = 4'b1101;  // fnd 10의 자리 on.
            2'b10:   fnd_com = 4'b1011;  // fnd 100의 자리 on. 
            2'b11:   fnd_com = 4'b0111;  // fnd 1000의 자리 on.
            default: fnd_com = 4'b1111;
        endcase
    end

endmodule

module digit_splitter #(
    parameter BIT_WIDTH = 7
) (
    input [BIT_WIDTH - 1:0] time_data,
    
    output [3:0] disit_1,
    output [3:0] disit_10
);
    assign disit_1 = time_data % 10;
    assign disit_10 = (time_data / 10) % 10;
endmodule
/* 
module MUX_4x1 (
    input [1:0] sel,
    input [3:0] disit_1,
    input [3:0] disit_10,
    input [3:0] disit_100,
    input [3:0] disit_1000,

    output reg [3:0] bcd
);
    always @(*) begin  // always 출력은 "reg"를 씀.
        case (sel)
            2'b00: bcd = disit_1;
            2'b01: bcd = disit_10;
            2'b10: bcd = disit_100;
            2'b11: bcd = disit_1000;
        endcase
    end
endmodule
 */
module MUX_8x1 (
    input [2:0] sel,
    input dot_display,
    input [3:0] disit_1,
    input [3:0] disit_10,
    input [3:0] disit_100,
    input [3:0] disit_1000,

    output reg [3:0] bcd
);
    always @(*) begin  // always 출력은 "reg"를 씀.
        case ({sel})
            3'b000: bcd = disit_1;
            3'b001: bcd = disit_10;
            3'b010: bcd = disit_100;
            3'b011: bcd = disit_1000;
            3'b100: bcd = 4'h0b;
            3'b101: bcd = 4'h0b;
            3'b110: bcd = (dot_display) ? 4'h0a : 4'h0b;
            3'b111: bcd = 4'h0b;
        endcase
    end
endmodule


module BCD (
    input [3:0] bcd, // 3bit면 2^3=8 까지밖에 표현이 안됨, FND에 9까지 표현 필요.

    output reg [7:0] fnd_data
);
    always @(*) begin  // always 출력은 "reg"를 씀.
        case (bcd)
            4'h00:   fnd_data = 8'hc0;
            4'h01:   fnd_data = 8'hf9;
            4'h02:   fnd_data = 8'ha4;
            4'h03:   fnd_data = 8'hb0;
            4'h04:   fnd_data = 8'h99;
            4'h05:   fnd_data = 8'h92;
            4'h06:   fnd_data = 8'h82;
            4'h07:   fnd_data = 8'hf8;
            4'h08:   fnd_data = 8'h80;
            4'h09:   fnd_data = 8'h90;
            4'h0a:   fnd_data = 8'h7f;
            4'h0b:   fnd_data = 8'hff;
            default: fnd_data = 8'h00;  
        endcase
    end

endmodule
